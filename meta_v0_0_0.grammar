
# Prefixed by:
#
#
# xxx{","}     zero or more xxx separates by ","
# xxx[rule]    one or more xxx separates by matching rule
#

integer:
    (\-|\+)?[0-9]+

string:
    "([^\s\\]|[ ]|(\\[\\nrvtf]))+"

identifier:
    [_a-zA-Z][_0-9a-zA-Z]*

newline:
    [\r\n]+

whitespace:
    [ \r\n\t\v\f]+

arithmeticOperator:
    \+|\-|*|/

logicalBinaryOperator:
    &&|\|\||

logicalUnaryOperator:
    !

compareOperator:
    >=|<=|>|<|==|!=

bitwiseBinaryOperator:
    <<<|>>>|<<|>>|\^|\&|\|

boolean:
    true|false

Value:
    "null"
    string
    boolean
    integer
    identifier
    "(" Value ")"
    "[" Value "]"
    Value BinaryOperator Value
    "!" Value
    Value "." identifier "(" Value{","} ")"    # Function call

Type:
    identifier["."]
    "array" "<" identifier["."] ">"

VarDeclUntypedAssigned:
    identifier[","] "=" Value[","]

VarDeclTypedAssigned:
    Type identifier[","] "=" Value[","]

VarDeclTypedUnassigned:
    Type identifier[","]

VarDeclTyped:
    VarDeclTypedAssigned
    VarDeclTypedUnassigned

VarDeclAssigned:
    VarDeclTypedAssigned
    VarDeclUntypedAssigned

VarDecl:
    VarDeclTypedAssigned
    VarDeclTypedUnassigned
    VarDeclUntypedAssigned

Assignment:
    Value[","] "=" Value[","]

StatementBlock:
    "{" Statement{whitespace} "}"

If:
    IfHead Elif{whitespace} Else{whitespace}

IfHead:
    "if" Value StatementBlock

Elif:
    "elif" Value StatementBlock

Else:
    "else" StatementBlock


While:
    "while" Value StatementBlock

For:
    "for" VarDeclAssigned{","}  ";" Value ";" Assignment{","} StatementBlock

Assignment:
    Value[","] "=" Value[","]

Statement:
    VarDecl
    If
    While
    For
    Return
    Assignment


StructDecl:
    "struct" identifier "{" VarDecl{newline} "}"

FunctionalOperator:
    "[]"
    arithmeticOperator
    compareOperator
    logicalBinaryOperator
    logicalUnaryOperator
    bitwiseBinaryOperator

FunctionName:
    identifier
    FunctionalOperator

FuncDecl:
    "func" FunctionName "(" VarDecl{","} ")" VarDeclTypedUnassigned StatementBlock

Return:
    "return" Value{","}

Module:    # after parsing this, accept end of file
    StructDecl[newline]
    FuncDecl[newline]
    Module{newline}

