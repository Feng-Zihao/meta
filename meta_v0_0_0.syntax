
# Prefixed by:
# % :           token
# @ :           rule which starts with token finally
# Capitalized   start with keywords
#
# xxx {","}         zero or more xxx separates by ","
# xxx [%newline]    one or more xxx separates by matching %newline
#

%integer:
    (-|+)?[0-9]+

%identifier:
    [a-zA-Z_][a-zA-Z_0-9]*

%newline:
    "\r"
    "\n"

%whitespace:
    "\r"
    "\n"
    "\t"
    "\v"
    "\f"
    " "

%arithmeticOperator:
    "+"
    "-"
    "*"
    "/"

%logicalBinaryOperator:
    "&&"
    "||"
    "=="
    "!="

%logicalUnaryOperator:
    "!"

%compareOperator:
    ">"
    "<"

%bitwiseBinaryOperator:
    "<<<"
    ">>>"    # rotate
    "<<"
    ">>"     # shift
    "^"
    "&"
    "|"







@attribute:
    %identifier["."]

@typeDecl:
    @attribute
    @typeDecl "[" "]"   #array type

@varDeclUntypedAssigned:
    %identifier[","] "=" Value[","]

@varDeclTypedAssigned:
    @typeDecl %identifier[","] "=" Value[","]

@varDeclTypedUnassigned:
    @typeDecl %identifier[","]

@varDeclTyped:
    @varDeclTypedAssigned
    @varDeclTypedUnassigned

@varDeclAssigned:
    @varDeclTypedAssigned
    @varDeclUntypedAssigned

@varDecl:
    @varDeclTypedAssigned
    @varDeclTypedUnassigned
    @varDeclUntypedAssigned

@module:
    StructDecl{%newline}
    FuncDecl{%newline}
    @module{%newline}

@assignment:
    @attribute "=" Value

@statement:
    @varDecl
    If
    While
    For
    Assignment





StructDecl:
    %identifier "{" @varDecl{%newline} "}"

FuncDecl:
    %identifier "(" @varDecl{","} ")" @varDeclTypedUnassigned StatementBlock

StatementBlock:
    "{" @statement{%whitespace} "}"

If:
    "if" Value StatementBlock
    If "elif" value StatementBlock
    If "else" StatementBlock

While:
    "while" Value StatementBlock

For:
    "for" @varDeclAssigned{","}  ";" Value ";" @assignment{","} StatementBlock


Assignment:
    Attribute(,) "=" Value(",")


Value:
    "true"
    "false"
    "null"
    Attribute
    FunctionCall
    Value(,)
    "(" Value ")"
    "{" Value "}"
    Value BinaryOperator Value
    UnaryOperator Value

FunctionCall:
    @attribute "(" Value(",") ")"
    FunctionCall(".")



