

struct Complex {
    real = 0.0
    imag = 0.0
}

func init(Complex self, double real, imag) {
    self.real = real;
    self.imag = imag;
}

func cmp(Complex self, other = Complex(0.0, 0.0)) int {
    if self.real == other.real
        return cmp(self.imag, other.imag)
    return cmp(self.imag, other.imag)
}

func wrap(int i) Complex {
    return Complex(real=i)         // implicit convertion
}

func unpack(Complex self) double, double{
    return self.real, self.imag
}

func cmp(Complex self) int {
    if self.a == other.a
        return 0
    return self.a < other.a
}

func +(Complex self, other) Complex {
    self.real, self.imag += other.real, other.imag
    return self
}


struct SS {
    array<int> a
}


func main() int {

    a = Complex[100]
    a = range(100)

    // Complex array of size 2
    // implicit array<Complex>
    b = array(Complex(1, 1), Complex(2, 2))  

    a = Complex(1, 2)
    b = Complex(-1, -2)
    a, b = a.unpack()


    v1, v2 = 20, 1
    v1, v2 = v2, v1
    v3 = v1 * (v2 + v1)

    i = 0
    while i < 10 {
        i += 1
    }
}

